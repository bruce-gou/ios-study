import UIKit
class RootViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate, UISearchResultsUpdating{
   //全部数据
    var listTeams: NSArray  = ["张三","李四","hello","bruce","王五","jeck","马六"]
    //过滤后的数据
    var listFilterTeams: NSArray = ["张三","李四","hello","bruce","王五","jeck","马六"]
    var searchController: UISearchController!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // 创建视图
        let screen = UIScreen.main.bounds
        // 设置 根视图背景色
        self.view.backgroundColor = UIColor.white
        
        self.view.addSubview(self.tableView);
        self.creatSearchBar()
    }
    //使用懒加载方式来创建UITableView
    lazy var tableView: UITableView = {
        // plain：普通表视图     grouped：分组表视图
        let tempTableView = UITableView (frame: self.view.bounds, style: UITableViewStyle.plain)
        tempTableView.delegate = self
        tempTableView.dataSource = self
        tempTableView.tableFooterView = UIView.init()
        return tempTableView
    }()
    //创建UISearchBar
    func creatSearchBar(){
        self.searchController = UISearchController(searchResultsController: nil)
        // 设置self 更新搜索结果对象
        self.searchController.searchResultsUpdater = self
        // 搜索时，去掉灰色背景
        self.searchController.dimsBackgroundDuringPresentation = false
        
        //设置搜索范围栏中的按钮
        self.searchController.searchBar.scopeButtonTitles = ["中文","英文"]
        self.searchController.searchBar.delegate = self
        
        self.searchController.searchBar.placeholder = "搜索"
        // 将搜索栏放到表视图的表头中
        self.tableView.tableHeaderView = self.searchController.searchBar
        //自适应
        self.searchController.searchBar.sizeToFit()
    }
    //根据输入的关键字来过滤搜索结果
    func filterBySubstring(filterStr: NSString!) {
        if filterStr == ""{
            self.listFilterTeams = self.listTeams
        }else{
            let predicate = NSPredicate(format: "SELF CONTAINS[c] %@", filterStr)
            self.listFilterTeams = self.listTeams.filtered(using: predicate) as NSArray
        }
        self.tableView.reloadData()
    }
//-------- 表视图 代理 -------
    //cell 个数，多少行
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.listFilterTeams.count
    }
    // 每个cell 展示 的数据处理
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
//----------- 默认样式的单元格 ----------------
        let cellid = "testCellID"
        // 实例化表视图对象
        var cell = tableView.dequeueReusableCell(withIdentifier: cellid)
        if cell == nil{
            //获得可重用单元格对象
            cell = UITableViewCell(style: .subtitle, reuseIdentifier: cellid)
        }
        // 填充 文本内容和 图标内容，可以用数组方式 ，根据 indexPath.row 的行数取得响应数组下标的内容进行填充
        cell?.textLabel?.text = self.listFilterTeams[indexPath.row] as? String  // 主标题
        cell?.detailTextLabel?.text = "这个是副标题" //副标题
        cell?.imageView?.image = UIImage(named: "3") //图标

        // 单元格 样式设置， 这个是 扩展指示图标，触摸该图标将切换到下一级表视图
        cell?.accessoryType = .disclosureIndicator
        return cell!
    }
    // 设置cell 高度
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 66.0
    }
    //选中cell 执行此方法，做要做的操作
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print(indexPath.row)
    }
    
// ------ 搜索框 代理 -------
    //MARK: UISearchBarDelegate
    //取消搜索
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        //隐藏键盘
        searchBar.resignFirstResponder()
//        self.listFilterTeams = self.listTeams
//        self.tableView.reloadData()
    }
    // 确认搜索"
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        //过滤搜索结果
        self.updateSearchResults(for: self.searchController)
    }
    //边输入边过滤搜索结果
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.updateSearchResults(for: self.searchController)
    }
    // 中英文 那2个按钮的回调
    func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
        print(selectedScope)
        self.updateSearchResults(for: self.searchController)
    }
    
    
 // 实现 UISearchResultsUpdating -- 取消按钮显示/隐藏的动画效果
    func updateSearchResults(for searchController: UISearchController) {
        let searchString = searchController.searchBar.text
        self.filterBySubstring(filterStr: searchString! as NSString)
        self.tableView.reloadData()
    }
}