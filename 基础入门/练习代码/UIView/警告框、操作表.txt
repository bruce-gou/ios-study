import UIKit

class RootViewController: UIViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // 创建视图
        let screen = UIScreen.main.bounds
        
    // 警告框按钮
        let buttonAlertView = UIButton(type: UIButtonType.system)
        buttonAlertView.setTitle("警告框", for: UIControlState())
        let buttonAlertViewWidth:CGFloat = 100
        let buttonAlertViewHeight:CGFloat = 30
        let buttonAlertViewTopView:CGFloat = 130
        buttonAlertView.frame = CGRect(x: (screen.size.width - buttonAlertViewWidth) / 2, y:buttonAlertViewTopView, width: buttonAlertViewWidth, height: buttonAlertViewHeight)
        //添加事件
        buttonAlertView.addTarget(self, action: #selector(testAlertView(_:)), for: .touchUpInside)
        self.view.addSubview(buttonAlertView)
    // 操作表按钮
        let buttonActionSheet = UIButton(type: UIButtonType.system)
        buttonActionSheet.setTitle("操作表", for: UIControlState())
        
        let buttonActionSheetWidth:CGFloat = 100
        let buttonActionSheetHeight:CGFloat = 30
        let buttonAcitonSheetTopView:CGFloat = 260
        
        buttonActionSheet.frame = CGRect(x: (screen.size.width - buttonActionSheetWidth) / 2, y: buttonAcitonSheetTopView, width: buttonActionSheetWidth, height: buttonActionSheetHeight)
        //指定事件
        buttonActionSheet.addTarget(self, action: #selector(testActionView(_:)), for: .touchUpInside)
        
        self.view.addSubview(buttonActionSheet)
        
    }
    // 警告框
    @objc func testAlertView(_ sender: AnyObject){
        // preferredStyle 这个参数是对话框的 类型， 对话框在 UIAlertControllerStyle 的枚举类型中定义的，
        //  alert : 警告框。    actionSheet: 操作表（默认的）
        let alertController: UIAlertController = UIAlertController(title:"警告框", message:"错误提示", preferredStyle: UIAlertControllerStyle.alert)
        
        
        
        // 没一个 UIAlertAction 对象对应一个按钮动作， UIAlertAction构造函数的第一个参数是按钮 标题，
        //第二个参数 style 是按钮样式  .cancel : 取消按钮样式，.default： 默认样式粗体显示标题 .destructive: 破坏性按钮样式，红色显示标题
        // 第三个参数是与按钮动作相关的闭包，
        let noAction = UIAlertAction(title: "NO", style: UIAlertActionStyle.cancel){
            (alertAction) -> Void in
            print("Tap no Button")
        }
        let yesAction = UIAlertAction(title: "yes", style: .default){
            (alertAction) -> Void in
            print("Tap yes Button")
        }
        // 将2个 UIAlertAction 对象添加到 UIAlertController 对象中，
        alertController.addAction(noAction)
        alertController.addAction(yesAction)
        // 显示 UIAlertController 对象
        self.present(alertController, animated: true, completion: nil)
    }
    
    //操作表
    @objc func testActionView(_ sender: AnyObject){
        let actionSheetController = UIAlertController()
        let cancelAction = UIAlertAction(title:"取消", style: UIAlertActionStyle.cancel){
            (alertAction)->Void in
            print("Tap 取消 Button")
        }
        
        let destructiveAction = UIAlertAction(title:"破坏性按钮",style: UIAlertActionStyle.destructive){
            (alertAction)-> Void in
            print("Tap 破坏性按钮 Button")
        }
        
        let otherAction = UIAlertAction(title: "新浪微博", style: UIAlertActionStyle.default){
            (alertAction) -> Void in
            print("Tap 新浪微博 Button")
        }
        
        actionSheetController.addAction(cancelAction)
        actionSheetController.addAction(destructiveAction)
        actionSheetController.addAction(otherAction)
        
        // 为ipad 设备设置锚点
        /*在ipad 设备下运行操作表时会以浮动层视图方式显示，我们需要设置 actionSheetController 的 popoverPresentationController 属性，该属性是  UIPopoverPresentationController类型。
          UIPopoverPresentationController 是浮动层视图控制器，要设置浮动层锚点，可以用过 popoverPresentationController的如下三个属性之一设置
          barButtonItem : 设置导航栏按钮(UIBarButtonItem)作为锚点。
          sourceView: 设置一个视图(UIView)作为锚点
          sourceRect: 指定一个区域(CGRect)作为锚点
         */
//        if let t = actionSheetController.popoverPresentationController{
//            t.sourceView = sender as! UIView
//        }
        actionSheetController.popoverPresentationController?.sourceView = sender as! UIView
         //显示
        self.present(actionSheetController, animated: true, completion: nil)
        
    }
}